---
title: "Predicting reproductive toxicity: a model for PFAS-like chemical structures"
subtitle: "BMIN503/EPID600 Final Project"
author: "Andrea Andress Huacachino"
format:
  html:
    toc: true
    toc-location: left
    toc-title: "Table of Contents"
    linkcolor: "#03C34A"
    code-fold: show
    code-tools: 
      source: true
      toggle: true
    code-copy: true
    code-overflow: scroll
    code-block-bg: true
    code-block-border-left: "#03C34A"
    df-print: paged
editor: visual
embed-resources: true
execute: 
  warning: false
  message: false
---

```{css, echo = FALSE }

/* makes table of content green */
.sidebar nav[role=doc-toc] ul>li>a.active, .sidebar nav[role=doc-toc] ul>li>ul>li>a.active {
    border-left: 1px solid #03C34A;
    color: #03C34A !important;
}

/* makes hover for TOC green */
.sidebar nav[role=doc-toc] ul>li>a:hover, .sidebar nav[role=doc-toc] ul>li>ul>li>a:hover {
    border-left: 1px solid #03C34A;
    color: #03C34A !important;
}
```

------------------------------------------------------------------------

## Overview

Per- and polyfluoroalkyl substances (PFAS) are a class of chemicals that pollute our environment. They are ubiquitous, and nearly in 99% of all humans on earth. Unfortunately, some members have been associated to various health outcomes, including reproductive health. Using supervised machine learning, the objective of the project is to predict the reproductive toxicity of PFAS members by characterizing their chemotypes and relating them to known biological outcomes. The data for the project was obtained from Tox 21 and CompToxAI. Dr. Joseph Romano assisted with obtaining the datasets while Dr. Trevor Penning assisted by identifying assays chosen as the biological endpoint. The project hopes to help provide more information on the toxicology of unknown PFAS as well as communicate the properties that lead to that toxicity.

All data is publicly available on my github repository, TOX21, and CompToxAI.

GitHub repository: [AndreaHuacachino/BMIN503/FinalProject](https://github.com/AndreaHuacachino/BMIN503_Final_Project)

## Introduction

Environmental toxicants are man made chemicals that are present in our environment due to industry and manufacturing plants. Many of these compounds are detrimental to human health. PFAS are a class of organofluorine compounds containing multiple fluorine atoms attached to an alkyl chain. These compounds differ in connectivity or carbon chain length. There exist nearly 15,000 synthetic chemicals, reported by the U.S. Environmental Protection Agency (EPA) . A notable example is perfluorooctanoic acid (PFOA), a prolific toxicant. It's production was widespread in the US until its ban in the 1990's. It is known to be an endocrine disrupting chemical, which are toxicants that lead to hormone dysregulation. While hormones affect many aspects of the body, one chief responsibility is the regulation of the reproductive system. Women with PFOA exposure have been reported to experience higher levels of infertility as well as other reproductive issues. Unfortunately, mechanistic knowledge of this dysregulation at the molecular level is greatly unknown. Fortunately, the EPA has attempted to understand this mechanism using in vitro biochemical assays. Of particular interest to this project, assays for the androgen and the estrogen receptor have been performed extensively. This data is publicly available for further studies.

Due to growing scrutiny by civilian and governmental organizations, many legacy PFAS have been pressured to be rolled back. However, in order to maintain profits, manufactures have been creating new PFAS. Many of the new "next generation" PFAS take advantage of the lack of toxicological data available to claim to be safer, despite no studies suggesting safety. The necessity for predicting toxicity from PFAS structure knowledge is then evident. The significance of my project is to create machine learning models to predict toxicity in novel PFAS for the ultimate goal to prioritize further studies and to help guide PFAS production towards a less toxic future.

Structure activity relation (SAR) studies are based on the chemical hypothesis that the structure of a molecule contains the necessary information as to how it will interact with a target (often times a protein), thus linking the molecule to a chemical or biological process. SAR studies are a well known tool in the pharmaceutical field to develop small molecule drugs for various symptoms and diseases. Quantitative (Q)SAR is a special case of SAR where relationships become quantified. QSAR is particularly important in predictions, often using machine learning approaches to build informative models. Of the possible algorithms to use, QSAR studies have historically relied on random forest due to its collection of desired features.

This research question is interdisciplinary by nature due to its ties with environmental toxicology. The field of environmental toxicology encompasses the fields of biology, chemistry, statistics, medicine, and recently, computer science. Advances in computer science have allowed predictive toxicology, a subset of toxicology, to flourish. This project falls within the field of predictive toxicology.

### Dataset description

The datasets used are a combination of datasets from Tox21 and CompToxAI. Tox21 is a database maintained by the U.S. EPA, National Toxicology Program (NTP), National Center for Advancing Translational Sciences (NCATS), and the Food and Drug Administration (FDA). Tox21 uses approximately 70 high-throughput assays covering over 125 important processes in the body to generate information about thousands of compounds. I have chosen the assays (see list in methods) most relevant to the project. All assays contained Androgen Receptor and Estrogen Receptor targets. The data reported in Tox21 assays contains pharmacological information such as identity, assay outcome, AC50, efficacy, activity, hill coefficient, among other information. In order to reduce the variables of outcomes, CompToxAI was used.

ComptoxAI is a toolkit designed to enable AI and data science research in computational toxicology maintained by Dr. Joseph Romano at Penn. ComptoxAI has a function to build datasets for QSAR. In this, it will predict how likely it is to be toxic using all the assay information from Tox21 and reduce it to one value. CompToxAI also provides structural data of the compounds which is not supplied by the original Tox21 assay data. The structural data is reported in MACCS Fingerprints. Each row of the table is an individual compound while each column reports the presence or absence of a particular chemotype (MACCS fingerprint). There are 166 chemotypes in the MACCS fingerprint. All data is reported in binary (0 or 1) except for the ID column. MACCS fingerprint is based on the SMARTS pattern to describe chemicals. The MACCS Fingerprint key can be found [here](https://list.indiana.edu/sympa/arc/chminf-l/2007-11/msg00058.html)

## Methods

First, all packages necessary for the project were loaded in and read.

**Loading in Packages**

```{r eval=FALSE}
install.packages("kernlab")
install.packages("randomForest")
install.packages("glmnet")
install.packages("tidymodels")
install.packages("dotwhisker")
install.packages("vip")
install.packages("VennDiagram")
```

```{r results='hide', message=FALSE, warning=FALSE}
library(tidyverse)
library(kernlab)
library(randomForest)
library(glmnet)
library(tidymodels)
tidymodels_prefer()
library(dotwhisker)
library(vip)
library(ggplot2)
library(VennDiagram)
```

**Reading in Files**

All files have been retrieved from [CompToxAI](https://comptox.ai/data.html) and [Tox21](https://tripod.nih.gov//tox21/pubdata/). Once downloaded onto my computer, I uploaded the files on my github in order for the data to be publicly available in an ordered csv file. Each file contains structural data pertaining to the chemical entity and toxicity by showing if it interacted with the target or not. First column is the chemical ID, then columns 2-167 are structural data of the chemical, finally column 168 is if it is likely to be toxic or not, 0 for nontoxic, 1 for toxic.

```{r}
#Descriptors in file name: protocol, target, cell type, agonist or antagonist
 
#First read in all androgen based assays, including both agonist and antagonist assays

ar_bla_agonist_p1 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-ar-bla-agonist-p1.csv', header = TRUE)

ar_bla_antagonist_p1 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-ar-bla-antagonist-p1.csv', header = TRUE)

ar_mda_kb2_luc_agonist_p1 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-ar-mda-kb2-luc-agonist-p1.csv', header = TRUE)

ar_mda_kb2_luc_agonist_p3 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-ar-mda-kb2-luc-agonist-p3.csv', header = TRUE)

ar_mda_kb2_luc_antagonist_p1 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-ar-mda-kb2-luc-antagonist-p1.csv', header = TRUE)

ar_mda_kb2_luc_antagonist_p2 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-ar-mda-kb2-luc-antagonist-p2.csv', header = TRUE)

#Then read in all estrogen based assays, including both agonist and antagonist assays

er_bla_agonist_p2 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-er-bla-agonist-p2.csv', header = TRUE)

er_bla_antagonist_p1 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-er-bla-antagonist-p1.csv', header = TRUE)

er_luc_bg1_4e2_agonist_p2 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-er-luc-bg1-4e2-agonist-p2.csv', header = TRUE)

er_luc_bg1_4e2_agonist_p4 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-er-luc-bg1-4e2-agonist-p4.csv', header = TRUE)

er_luc_bg1_4e2_antagonist_p1 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-er-luc-bg1-4e2-antagonist-p1.csv', header = TRUE)

er_luc_bg1_4e2_antagonist_p2 <- read.csv('https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/andrea_tox21-er-luc-bg1-4e2-antagonist-p2.csv', header = TRUE)

#To show an example of the type of datafile and columns
head(er_luc_bg1_4e2_antagonist_p2, 5)
```

Then, a specification for a random forest classifier was created. The number of trees, minimum node size, and the use of variable importance was specified. 100 trees was chosen for the forest due to computation limitations.

```{r}
#random forest classifier
rf_cls_spec <- 
  rand_forest(trees = 100, min_n = 5) |> 
  set_engine("randomForest", importance = TRUE) |>
  set_mode("classification")
rf_cls_spec
```

A workflow for the cross validation step was also created to allow for the repetitive step to be completed quicker. Briefly, the workflow adds the random forest model and defines the variable to classify by. The data to use is not specified because the workflow is applied to all folds created by all the models.

```{r}
#general cross validation
rf_workflow <-
  workflow() |>
  add_model(rf_cls_spec) |>
  add_formula(target ~ .) #This makes sure to use all variables (~ .) to predict target 
```

Specific models were created using each dataset (assay) using the following steps for every dataset.

1.  Each dataset was cleaned up to include factors in all the columns except for the ID (X) column. Then another version of the dataset was created to remove the ID column in order to make the model.
2.  The model was created by first setting a seed, then using the random forest classification generated above on the dataset without IDs.
3.  Then the gini_importance score was taken to see top variables that influence the model.
4.  Finally, the model was cross validated. First 5 folds were created for the dataset, then the folds were passed through the workflow. The metrics of the cross validation were printed to evaluate the model and the ROC curve was saved onto a variable for later graphing.

### Androgen Receptor models

Assay: ar_bla_agonist_p1

```{r}
#making dataset include factors
ar_bla_agonist_p1.2 <- ar_bla_agonist_p1 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1"))) #With ID

ar_bla_agonist_p1.3 <- ar_bla_agonist_p1.2 |> #to get rid of ID
  select(-X)

#Making model of ar_bla_agonist_p1
set.seed(1234)
ar_bla_agonist_p1.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = ar_bla_agonist_p1.3)

#gini_importance score
ar_bla_agonist_p1.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
ar_bla_agonist_p1.folds <- vfold_cv(ar_bla_agonist_p1.3, v=5)

set.seed(1234)
ar_bla_agonist_p1.cv <-
  rf_workflow |>
  fit_resamples(ar_bla_agonist_p1.folds, 
                control = control_resamples(save_pred = TRUE)) #4 mins

collect_metrics(ar_bla_agonist_p1.cv)

ar_bla_agonist_p1.roc <- ar_bla_agonist_p1.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: ar_bla_antagonist_p1

```{r}

#making dataset include factors
ar_bla_antagonist_p1.2 <- ar_bla_antagonist_p1 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1")))

ar_bla_antagonist_p1.3 <- ar_bla_antagonist_p1.2 |>
  select(-X)

#Making model
set.seed(1234)
ar_bla_antagonist_p1.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = ar_bla_antagonist_p1.3)

#gini_importance score
ar_bla_antagonist_p1.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
ar_bla_antagonist_p1.folds <- vfold_cv(ar_bla_antagonist_p1.3, v=5)

set.seed(1234)
ar_bla_antagonist_p1.cv <-
  rf_workflow |>
  fit_resamples(ar_bla_antagonist_p1.folds, 
                control = control_resamples(save_pred = TRUE)) #3 mins

collect_metrics(ar_bla_antagonist_p1.cv)

ar_bla_antagonist_p1.roc <- ar_bla_antagonist_p1.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: ar_mda_kb2_luc_agonist_p1

```{r}
#making dataset include factors
ar_mda_kb2_luc_agonist_p1.2 <- ar_mda_kb2_luc_agonist_p1 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1")))
ar_mda_kb2_luc_agonist_p1.3 <- ar_mda_kb2_luc_agonist_p1.2 |>
  select(-X)

#Making model
set.seed(1234)
ar_mda_kb2_luc_agonist_p1.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = ar_mda_kb2_luc_agonist_p1.3)

#gini_importance score
ar_mda_kb2_luc_agonist_p1.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
ar_mda_kb2_luc_agonist_p1.folds <- vfold_cv(ar_mda_kb2_luc_agonist_p1.3, v=5)

set.seed(1234)
ar_mda_kb2_luc_agonist_p1.cv <-
  rf_workflow |>
  fit_resamples(ar_mda_kb2_luc_agonist_p1.folds, 
                control = control_resamples(save_pred = TRUE)) #2 min 

collect_metrics(ar_mda_kb2_luc_agonist_p1.cv)

ar_mda_kb2_luc_agonist_p1.roc <- ar_mda_kb2_luc_agonist_p1.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: ar_mda_kb2_luc_agonist_p3

```{r}
#making dataset include factors
ar_mda_kb2_luc_agonist_p3.2 <- ar_mda_kb2_luc_agonist_p3 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1")))
ar_mda_kb2_luc_agonist_p3.3 <- ar_mda_kb2_luc_agonist_p3.2 |>
  select(-X)

#Making model
set.seed(1234)
ar_mda_kb2_luc_agonist_p3.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = ar_mda_kb2_luc_agonist_p3.3)

#gini_importance score
ar_mda_kb2_luc_agonist_p3.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
ar_mda_kb2_luc_agonist_p3.folds <- vfold_cv(ar_mda_kb2_luc_agonist_p3.3, v=5)

set.seed(1234)
ar_mda_kb2_luc_agonist_p3.cv <-
  rf_workflow |>
  fit_resamples(ar_mda_kb2_luc_agonist_p3.folds, 
                control = control_resamples(save_pred = TRUE)) 

collect_metrics(ar_mda_kb2_luc_agonist_p3.cv)

ar_mda_kb2_luc_agonist_p3.roc <- ar_mda_kb2_luc_agonist_p3.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: ar_mda_kb2_luc_antagonist_p1

```{r}
#making dataset include factors
ar_mda_kb2_luc_antagonist_p1.2 <- ar_mda_kb2_luc_antagonist_p1 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1")))
ar_mda_kb2_luc_antagonist_p1.3 <- ar_mda_kb2_luc_antagonist_p1.2 |>
  select(-X)

#Making model
set.seed(1234)
ar_mda_kb2_luc_antagonist_p1.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = ar_mda_kb2_luc_antagonist_p1.3)

#gini_importance score
ar_mda_kb2_luc_antagonist_p1.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
ar_mda_kb2_luc_antagonist_p1.folds <- vfold_cv(ar_mda_kb2_luc_antagonist_p1.3, v=5)

set.seed(1234)
ar_mda_kb2_luc_antagonist_p1.cv <-
  rf_workflow |>
  fit_resamples(ar_mda_kb2_luc_antagonist_p1.folds, 
                control = control_resamples(save_pred = TRUE)) 

collect_metrics(ar_mda_kb2_luc_antagonist_p1.cv)

ar_mda_kb2_luc_antagonist_p1.roc <- ar_mda_kb2_luc_antagonist_p1.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: ar_mda_kb2_luc_antagonist_p2

```{r}
#making dataset include factors
ar_mda_kb2_luc_antagonist_p2.2 <- ar_mda_kb2_luc_antagonist_p2 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1")))
ar_mda_kb2_luc_antagonist_p2.3 <- ar_mda_kb2_luc_antagonist_p2.2 |>
  select(-X) 

#Making model
set.seed(1234)
ar_mda_kb2_luc_antagonist_p2.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = ar_mda_kb2_luc_antagonist_p2.3)

#gini_importance score
ar_mda_kb2_luc_antagonist_p2.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation
set.seed(1234)
ar_mda_kb2_luc_antagonist_p2.folds <- vfold_cv(ar_mda_kb2_luc_antagonist_p2.3, v=5)

set.seed(1234)
ar_mda_kb2_luc_antagonist_p2.cv <-
  rf_workflow |>
  fit_resamples(ar_mda_kb2_luc_antagonist_p2.folds, 
                control = control_resamples(save_pred = TRUE)) 

collect_metrics(ar_mda_kb2_luc_antagonist_p2.cv)

ar_mda_kb2_luc_antagonist_p2.roc <- ar_mda_kb2_luc_antagonist_p2.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

AUC curves for Androgen based ML

In order to visualize the models efficiency, the ROC curves were plotted using ggplot. Each assay model was plotted, and the accuracy is written on the legend.

```{r}
ggplot() + 
  geom_path(data = ar_bla_agonist_p1.roc, aes (x=1 - specificity, y = sensitivity, color = "green")) +
  geom_path(data = ar_bla_antagonist_p1.roc, aes (x=1 - specificity, y = sensitivity, color = "red")) +
  geom_path(data = ar_mda_kb2_luc_agonist_p1.roc, aes (x=1 - specificity, y = sensitivity, color = "lightgreen")) +
  geom_path(data = ar_mda_kb2_luc_agonist_p3.roc, aes (x=1 - specificity, y = sensitivity, color = "darkgreen")) +
  geom_path(data = ar_mda_kb2_luc_antagonist_p1.roc, aes (x=1 - specificity, y = sensitivity, color = "pink")) +
  geom_path(data = ar_mda_kb2_luc_antagonist_p2.roc, aes (x=1 - specificity, y = sensitivity, color = "darkred")) +
  labs(color = "Model (based on Tox21 assay)") +
  scale_color_manual(values = (c("green","red","lightgreen","darkgreen","pink","darkred")), 
                     labels = ~ stringr::str_wrap(c("ar_bla_agonist_p1, accuracy: 0.9795108, auc: 0.8719811", "ar_bla_antagonist_p1, accuracy: 0.9346703, auc: 0.8738544", "ar_mda_kb2_luc_agonist_p1, accuracy: 0.9807095, auc: 0.8256256", "ar_mda_kb2_luc_agonist_p3, accuracy: 0.9852045, auc: 0.8515814", "ar_mda_kb2_luc_antagonist_p1, accuracy: 0.9467155, auc: 0.8415737", "ar_mda_kb2_luc_antagonist_p2, accuracy: 0.8871589, auc: 0.8824981"), width = 20)) +
  geom_abline(lty=3) +
  coord_equal() +
  theme_bw() +
  ggtitle("AUC of ML models of Androgen Receptor Toxicity")
```

### Estrogen Receptor models

Assay: er_bla_agonist_p2

```{r}
#making dataset include factors
er_bla_agonist_p2.2 <- er_bla_agonist_p2 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1"))) #for ID

er_bla_agonist_p2.3 <- er_bla_agonist_p2.2 |> #to get rid of ID
  select(-X)

#Making model 
set.seed(1234)
er_bla_agonist_p2.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = er_bla_agonist_p2.3)

#gini_importance score
er_bla_agonist_p2.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
er_bla_agonist_p2.folds <- vfold_cv(er_bla_agonist_p2.3, v=5)

set.seed(1234)
er_bla_agonist_p2.cv <-
  rf_workflow |>
  fit_resamples(er_bla_agonist_p2.folds, 
                control = control_resamples(save_pred = TRUE)) #3 mins

collect_metrics(er_bla_agonist_p2.cv)

er_bla_agonist_p2.roc <- er_bla_agonist_p2.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: er_bla_antagonist_p1

```{r}
#making dataset include factors
 er_bla_antagonist_p1.2 <-  er_bla_antagonist_p1 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1"))) #for ID

 er_bla_antagonist_p1.3 <-  er_bla_antagonist_p1.2 |> #to get rid of ID
  select(-X)

#Making model 
set.seed(1234)
 er_bla_antagonist_p1.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = er_bla_antagonist_p1.3)

#gini_importance score
 er_bla_antagonist_p1.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
 er_bla_antagonist_p1.folds <- vfold_cv( er_bla_antagonist_p1.3, v=5)

set.seed(1234)
 er_bla_antagonist_p1.cv <-
  rf_workflow |>
  fit_resamples( er_bla_antagonist_p1.folds, 
                control = control_resamples(save_pred = TRUE)) #2 mins

collect_metrics( er_bla_antagonist_p1.cv)

er_bla_antagonist_p1.roc <-  er_bla_antagonist_p1.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: er_luc_bg1_4e2_agonist_p2

```{r}
#making dataset include factors
 er_luc_bg1_4e2_agonist_p2.2 <-  er_luc_bg1_4e2_agonist_p2 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1"))) #for ID

 er_luc_bg1_4e2_agonist_p2.3 <-  er_luc_bg1_4e2_agonist_p2.2 |> #to get rid of ID
  select(-X)

#Making model 
set.seed(1234)
 er_luc_bg1_4e2_agonist_p2.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = er_luc_bg1_4e2_agonist_p2.3)
 
#gini_importance score
er_luc_bg1_4e2_agonist_p2.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
er_luc_bg1_4e2_agonist_p2.folds <- vfold_cv(er_luc_bg1_4e2_agonist_p2.3, v=5)

set.seed(1234)
 er_luc_bg1_4e2_agonist_p2.cv <-
  rf_workflow |>
  fit_resamples(er_luc_bg1_4e2_agonist_p2.folds, 
                control = control_resamples(save_pred = TRUE)) #2 mins

collect_metrics(er_luc_bg1_4e2_agonist_p2.cv)

er_luc_bg1_4e2_agonist_p2.roc <-  er_luc_bg1_4e2_agonist_p2.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: er_luc_bg1_4e2_agonist_p4

```{r}
#making dataset include factors
er_luc_bg1_4e2_agonist_p4.2 <-  er_luc_bg1_4e2_agonist_p4 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1"))) #for ID

er_luc_bg1_4e2_agonist_p4.3 <-  er_luc_bg1_4e2_agonist_p4.2 |> #to get rid of ID
  select(-X)

#Making model 
set.seed(1234)
 er_luc_bg1_4e2_agonist_p4.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = er_luc_bg1_4e2_agonist_p4.3)
 
#gini_importance score
er_luc_bg1_4e2_agonist_p4.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
er_luc_bg1_4e2_agonist_p4.folds <- vfold_cv(er_luc_bg1_4e2_agonist_p4.3, v=5)

set.seed(1234)
er_luc_bg1_4e2_agonist_p4.cv <-
  rf_workflow |>
  fit_resamples(er_luc_bg1_4e2_agonist_p4.folds, 
                control = control_resamples(save_pred = TRUE)) #2 mins

collect_metrics(er_luc_bg1_4e2_agonist_p4.cv)

er_luc_bg1_4e2_agonist_p4.roc <- er_luc_bg1_4e2_agonist_p4.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: er_luc_bg1_4e2_antagonist_p1

```{r}
#making dataset include factors
er_luc_bg1_4e2_antagonist_p1.2 <- er_luc_bg1_4e2_antagonist_p1 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1"))) #for ID

er_luc_bg1_4e2_antagonist_p1.3 <- er_luc_bg1_4e2_antagonist_p1.2 |> 
  select(-X) 

#Making model 
set.seed(1234)
 er_luc_bg1_4e2_antagonist_p1.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = er_luc_bg1_4e2_antagonist_p1.3)
 
#gini_importance score
er_luc_bg1_4e2_antagonist_p1.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
er_luc_bg1_4e2_antagonist_p1.folds <- vfold_cv(er_luc_bg1_4e2_antagonist_p1.3, v=5)

set.seed(1234)
er_luc_bg1_4e2_antagonist_p1.cv <-
  rf_workflow |>
  fit_resamples(er_luc_bg1_4e2_antagonist_p1.folds, 
                control = control_resamples(save_pred = TRUE)) 

collect_metrics(er_luc_bg1_4e2_antagonist_p1.cv)

er_luc_bg1_4e2_antagonist_p1.roc <- er_luc_bg1_4e2_antagonist_p1.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

Assay: er_luc_bg1_4e2_antagonist_p2

```{r}
#making dataset include factors
er_luc_bg1_4e2_antagonist_p2.2 <- er_luc_bg1_4e2_antagonist_p2 |>
  mutate(across(-1, as.factor)) |>
  mutate(target = factor(target, levels = c(0, 1), labels = c("0", "1"))) 

er_luc_bg1_4e2_antagonist_p2.3 <- er_luc_bg1_4e2_antagonist_p2.2 |> 
  select(-X) 

#Making model 
set.seed(1234)
er_luc_bg1_4e2_antagonist_p2.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = er_luc_bg1_4e2_antagonist_p2.3)
 
#gini_importance score
er_luc_bg1_4e2_antagonist_p2.rf_cls_fit |> 
  extract_fit_engine() |>
  vip()

#cross validation 
set.seed(1234)
er_luc_bg1_4e2_antagonist_p2.folds <- vfold_cv(er_luc_bg1_4e2_antagonist_p2.3, v=5)

set.seed(1234)
er_luc_bg1_4e2_antagonist_p2.cv <-
  rf_workflow |>
  fit_resamples(er_luc_bg1_4e2_antagonist_p2.folds, 
                control = control_resamples(save_pred = TRUE)) 

collect_metrics(er_luc_bg1_4e2_antagonist_p2.cv)


er_luc_bg1_4e2_antagonist_p2.roc <- er_luc_bg1_4e2_antagonist_p2.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)
```

AUC curves for Estrogen based ML

In order to visualize the models efficiency, the ROC curves were plotted using ggplot. Each assay model was plotted, and the accuracy is written on the legend.

```{r}
ggplot() + 
  geom_path(data = er_bla_agonist_p2.roc, aes (x=1 - specificity, y = sensitivity, color = "green")) +
  geom_path(data = er_bla_antagonist_p1.roc, aes (x=1 - specificity, y = sensitivity, color = "red")) +
  geom_path(data = er_luc_bg1_4e2_agonist_p2.roc, aes (x=1 - specificity, y = sensitivity, color = "lightgreen")) +
  geom_path(data = er_luc_bg1_4e2_agonist_p4.roc, aes (x=1 - specificity, y = sensitivity, color = "darkgreen")) +
  geom_path(data = er_luc_bg1_4e2_antagonist_p1.roc, aes (x=1 - specificity, y = sensitivity, color = "pink")) +
  geom_path(data = er_luc_bg1_4e2_antagonist_p2.roc, aes (x=1 - specificity, y = sensitivity, color = "darkred")) +
  labs(color = "Model (based on Tox21 assay)") +
  scale_color_manual(values = (c("green","red","lightgreen","darkgreen","pink","darkred")), 
                     labels = ~ stringr::str_wrap(c("er_bla_agonist_p2, accuracy: 0.9588106, auc: 0.8225909", "er_bla_antagonist_p1, accuracy: 0.9499103, auc: 0.8501092", "er_luc_bg1_4e2_agonist_p2, accuracy: 0.9079745, auc: 0.7541755", "er_luc_bg1_4e2_agonist_p4, accuracy: 0.9878664, auc: 0.9309918", "er_luc_bg1_4e2_antagonist_p1, accuracy: 0.9517049, auc: 0.8667600", "er_luc_bg1_4e2_antagonist_p2, accuracy: 0.9389092, auc: 0.8710696"), width = 20)) +
  geom_abline(lty=3) +
  coord_equal() +
  theme_bw() +
  ggtitle("AUC of ML models of Estrogen Receptor Toxicity")
```

## Results

In order to compare the top chemotypes (variables) of the models, we first must take into account the experimental biochemistry considerations of each dataset.

Compound or molecule can interact with the biological target in various ways to elicit different outcomes. An "agonist" is a compound that binds or interacts with the target receptor and produces a biological response. An "antagonist" is a compound that binds or interacts with the target receptor, however have no biological effect. This is usually considered to be an inhibitor, since it is stopping the biological effect from happening. Both agonists and antagonists can result in disregulation of hormones through different mechanisms.

It is important to separate the models into four major groups:

1.  Androgen Receptor agonist
2.  Androgen Receptor antagonist
3.  Estrogen Receptor agonist
4.  Estrogen Receptor antagonist

This is done since a compound that would be toxic to the androgen receptor by being an agonist for the receptor would in theory be structurally different from an androgen receptor antagonist. Same idea is held true for the the estrogen receptor.

For each major group, the mean decrease gini was obtained and arranged in a descending order. Then the values were converted to logarithmic to get the logarithmic distribution of the values. The mean and standard deviation of the distribution was taken. The threshold for what was considered a significant mean decrease gini score was determined by any value that was above one standard deviation of the mean. All top values were stored into a variable for future use.

### Androgen Receptor agonist

```{r}
#AR agonist assays: ar_bla_agonist_p1, ar_mda_kb2_luc_agonist_p1, ar_mda_kb2_luc_agonist_p3

#geting meandecreasegini
agonist1_important <- ar_bla_agonist_p1.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
agonist1_log<- log(agonist1_important$MeanDecreaseGini)
hist(agonist1_log, 25, main = "ar_bla_agonist_p1 model histogram", xlab = "log (mean decrease gini)")  

agonist_1std <- sd(agonist1_log[is.finite(agonist1_log)], na.rm=TRUE)
agonist_1mean <- mean(agonist1_log[is.finite(agonist1_log)], na.rm=TRUE)
agonist_1threshold <- exp(agonist_1mean+agonist_1std)

#values above 1 std 
agonist1_top <-agonist1_important |>
  filter(MeanDecreaseGini > agonist_1threshold)

#__________________________________________________________________________________

agonist2_important <- ar_mda_kb2_luc_agonist_p1.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
agonist2_log<- log(agonist2_important$MeanDecreaseGini)
hist(agonist2_log, 25, main = "ar_mda_kb2_luc_agonist_p1 model histogram", xlab = "log (mean decrease gini)")  
agonist_2std <- sd(agonist2_log[is.finite(agonist2_log)], na.rm=TRUE)
agonist_2mean <- mean(agonist2_log[is.finite(agonist2_log)], na.rm=TRUE)
agonist_2threshold <- exp(agonist_2mean+agonist_2std)

#values above 1 std 
agonist2_top <-agonist2_important |>
  filter(MeanDecreaseGini > agonist_2threshold)

#__________________________________________________________________________________

agonist3_important <- ar_mda_kb2_luc_agonist_p3.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
agonist3_log<- log(agonist3_important$MeanDecreaseGini)
hist(agonist3_log, 25, main = "ar_mda_kb2_luc_agonist_p3 model histogram", xlab = "log (mean decrease gini)") 
agonist_3std <- sd(agonist3_log[is.finite(agonist3_log)], na.rm=TRUE)
agonist_3mean <- mean(agonist3_log[is.finite(agonist3_log)], na.rm=TRUE)
agonist_3threshold <- exp(agonist_3mean+agonist_3std)

#values above 1 std 
agonist3_top <-agonist3_important |>
  filter(MeanDecreaseGini > agonist_3threshold)
```

The top chemotypes of each model for the androgen receptor agonist were intersected to find the common chemotypes.

```{r}
#same values
  #pairwise
AR_A1A2_values <- intersect(agonist1_top$chemotype, agonist2_top$chemotype)
AR_A1A3_values <- intersect(agonist1_top$chemotype, agonist3_top$chemotype)
AR_A2A3_values <- intersect(agonist2_top$chemotype, agonist3_top$chemotype)

  #all three assays
AR_agonist_common <- intersect(intersect(agonist1_top$chemotype, agonist2_top$chemotype), agonist3_top$chemotype)
print(AR_agonist_common)
```

A venn diagram of the top chemotypes of the androgen receptor agonist models was created. There are 8 chemotypes in common.

```{r}
#venn diagram
  #making intersects lists
AR_agonist_allthree <- c(AR_agonist_common)
AR_A1A2_names <- c(AR_A1A2_values)
AR_A1A3_names <- c(AR_A1A3_values)
AR_A2A3_names <- c(AR_A2A3_values)

  #making files lists
agonist1_top_listforvenndiagram <- c(agonist1_top$chemotypes)
agonist2_top_listforvenndiagram <- c(agonist2_top$chemotypes)
agonist3_top_listforvenndiagram <- c(agonist3_top$chemotypes)

  #making Venndiagram object
AR_agonist_venndiagram <- venn.diagram(list(ar_bla_agonist_p1=agonist1_top_listforvenndiagram, ar_mda_kb2_luc_agonist_p1=agonist2_top_listforvenndiagram, ar_mda_kb2_luc_agonist_p3=agonist3_top_listforvenndiagram),
                  fill = c("orange", "blue", "pink"),
                  filename=NULL, 'cat.just' = list(c(1.5,-2),c(0.5,1),c(0,-3)) )


grid.newpage()
grid.draw(AR_agonist_venndiagram) 
```

To further explore the 8 top chemotypes, a new model was created in order to validate the importance of the chemotypes. ar_mda_kb2_luc_agonist_p1 dataset was used since it has the most observations. First the file was cut to only have the top 8 chemotypes. Then a model was created. The model was cross validated 5 fold. The new model was compared to the original ar_mda_kb2_luc_agonist_p1 model. The new model had reduced AUC and accuracy. However, the new model was still able to predict the toxicity. This gives confidence that these chemotypes are relevant.

```{r}
#cut files to have only certain column
ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.2 <- ar_mda_kb2_luc_agonist_p1.2 |>
  select(X, C..C..A..A, CC.C..C.A, A.A..A..A, X5.M.ring, C.C.C.C, C.C, C.C.A.A, X6M.ring...1,target)

ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.3 <- ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.2 |>
  select(-X)

#make model
set.seed(1234)
ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.3)

#cross validation 
set.seed(1234)
ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.folds <- vfold_cv(ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.3, v=5)

set.seed(1234)
ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.cv <-
  rf_workflow |>
  fit_resamples(ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.folds, 
                control = control_resamples(save_pred = TRUE)) 

collect_metrics(ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.cv)

#auc 
ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.roc <- ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)

#Graph to compare old to new
ggplot() + 
  geom_path(data = ar_mda_kb2_luc_agonist_p1.roc, aes (x=1 - specificity, y = sensitivity, color = "blue")) +
  geom_path(data = ar_mda_kb2_luc_agonist_p1_onlyimportantcolumns.roc, aes (x=1 - specificity, y = sensitivity, color = "red")) +
  labs(color = "Model") +
  scale_color_manual(values = (c("blue","red")), 
                     labels = ~ stringr::str_wrap(c("Full model (all chemotypes), accuracy: 0.9807095, auc: 0.8256256", "New model (only top chemotypes), accuracy: 0.9760801, auc: 0.741594"), width = 20)) +
  geom_abline(lty=3) +
  coord_equal() +
  theme_bw() +
  ggtitle("Comparison of ar_mda_kb2_luc_agonist_p1 models")
```

### Androgen Receptor antagonist

```{r}
#AR antagonist assays: ar_bla_antagonist_p1, ar_mda_kb2_luc_antagonist_p1, ar_mda_kb2_luc_antagonist_p2

#geting meandecreasegini
antagonist1_important <- ar_bla_antagonist_p1.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
antagonist1_log<- log(antagonist1_important$MeanDecreaseGini)
hist(antagonist1_log, 25, main = "ar_bla_antagonist_p1 model histogram", xlab =" log (mean decrease gini)")  
antagonist_1std <- sd(antagonist1_log[is.finite(antagonist1_log)], na.rm=TRUE)
antagonist_1mean <- mean(antagonist1_log[is.finite(antagonist1_log)], na.rm=TRUE)
antagonist_1threshold <- exp(antagonist_1mean+antagonist_1std)

#values above 1 std 
antagonist1_top <-antagonist1_important |>
  filter(MeanDecreaseGini > antagonist_1threshold)

#_________________________________________________________________________________

#geting meandecreasegini
antagonist2_important <- ar_mda_kb2_luc_antagonist_p1.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
antagonist2_log<- log(antagonist2_important$MeanDecreaseGini)
hist(antagonist2_log, 25,  main = "ar_mda_kb2_luc_antagonist_p1 model histogram", xlab =" log (mean decrease gini)")  
antagonist_2std <- sd(antagonist2_log[is.finite(antagonist2_log)], na.rm=TRUE)
antagonist_2mean <- mean(antagonist2_log[is.finite(antagonist2_log)], na.rm=TRUE)
antagonist_2threshold <- exp(antagonist_2mean+antagonist_2std)

#values above std 
antagonist2_top <-antagonist2_important |>
  filter(MeanDecreaseGini > antagonist_2threshold)

#__________________________________________________________________________________

#geting meandecreasegini
antagonist3_important <- ar_mda_kb2_luc_antagonist_p2.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
antagonist3_log<- log(antagonist3_important$MeanDecreaseGini)
hist(antagonist3_log, 25, main = "ar_mda_kb2_luc_antagonist_p2 model histogram", xlab =" log (mean decrease gini)")  
antagonist_3std <- sd(antagonist3_log[is.finite(antagonist3_log)], na.rm=TRUE)
antagonist_3mean <- mean(antagonist3_log[is.finite(antagonist3_log)], na.rm=TRUE)
antagonist_3threshold <- exp(antagonist_3mean+antagonist_3std)

#values above std 
antagonist3_top <-antagonist3_important |>
  filter(MeanDecreaseGini > antagonist_3threshold)
```

The top chemotypes of each model for the androgen receptor antagonist were intersected to find the common chemotypes.

```{r}
#same values
  #pairwise
AR_An1An2_values <- intersect(antagonist1_top$chemotype, antagonist2_top$chemotype)
AR_An1An3_values <- intersect(antagonist1_top$chemotype, antagonist3_top$chemotype)
AR_An2An3_values <- intersect(antagonist2_top$chemotype, antagonist3_top$chemotype)

  #all three assays
AR_antagonist_common <- intersect(intersect(antagonist1_top$chemotype, antagonist2_top$chemotype), antagonist3_top$chemotype)
print(AR_antagonist_common)
```

No common chemotype makes them androgen receptor antagonist in all assays analyzed. Further analysis did not take place.

### Estrogen Receptor agonist

```{r}
#ER agonist assays: er_bla_agonist_p2, er_luc_bg1_4e2_agonist_p2, er_luc_bg1_4e2_agonist_p4

#geting meandecreasegini
Eagonist1_important <- er_bla_agonist_p2.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
Eagonist1_log<- log(Eagonist1_important$MeanDecreaseGini)
hist(Eagonist1_log, 25, main = "er_bla_agonist_p2 model histogram", xlab =" log (mean decrease gini)")  
Eagonist_1std <- sd(Eagonist1_log[is.finite(Eagonist1_log)], na.rm=TRUE)
Eagonist_1mean <- mean(Eagonist1_log[is.finite(Eagonist1_log)], na.rm=TRUE)
Eagonist_1threshold <- exp(Eagonist_1mean+Eagonist_1std)

#values above 1 std 
Eagonist1_top <-Eagonist1_important |>
  filter(MeanDecreaseGini > Eagonist_1threshold)

#_________________________________________________________________________________

#geting meandecreasegini
Eagonist2_important <- er_luc_bg1_4e2_agonist_p2.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
Eagonist2_log<- log(Eagonist2_important$MeanDecreaseGini)
hist(Eagonist2_log, 25,  main = "er_luc_bg1_4e2_agonist_p2 model histogram", xlab =" log (mean decrease gini)")  
Eagonist_2std <- sd(Eagonist2_log[is.finite(Eagonist2_log)], na.rm=TRUE)
Eagonist_2mean <- mean(Eagonist2_log[is.finite(Eagonist2_log)], na.rm=TRUE)
Eagonist_2threshold <- exp(Eagonist_2mean+Eagonist_2std)

#values above std 
Eagonist2_top <-Eagonist2_important |>
  filter(MeanDecreaseGini > Eagonist_2threshold)

#__________________________________________________________________________________

#geting meandecreasegini
Eagonist3_important <- er_luc_bg1_4e2_agonist_p4.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
Eagonist3_log<- log(Eagonist3_important$MeanDecreaseGini)
hist(Eagonist3_log, 25, main = "er_luc_bg1_4e2_agonist_p4 model histogram", xlab =" log (mean decrease gini)")  
Eagonist_3std <- sd(Eagonist3_log[is.finite(Eagonist3_log)], na.rm=TRUE)
Eagonist_3mean <- mean(Eagonist3_log[is.finite(Eagonist3_log)], na.rm=TRUE)
Eagonist_3threshold <- exp(Eagonist_3mean+Eagonist_3std)

#values above std 
Eagonist3_top <-Eagonist3_important |>
  filter(MeanDecreaseGini > Eagonist_3threshold)
```

The top chemotypes of each model for the estrogen receptor agonist were intersected to find the common chemotypes.

```{r}
#same values
  #pairwise
ER_A1A2_values <- intersect(Eagonist1_top$chemotype, Eagonist2_top$chemotype)
ER_A1A3_values <- intersect(Eagonist1_top$chemotype, Eagonist3_top$chemotype)
ER_A2A3_values <- intersect(Eagonist2_top$chemotype, Eagonist3_top$chemotype)

  #all three assays
ER_agonist_common <- intersect(intersect(Eagonist1_top$chemotype, Eagonist2_top$chemotype), Eagonist3_top$chemotype)
print(ER_agonist_common)
```

A venn diagram of the top chemotypes of the estrogen receptor agonist models was created. There are 2 chemotypes in common.

```{r}
#venn diagram
  #making intersects lists
ER_agonist_allthree <- c(ER_agonist_common)
ER_A1A2_names <- c(ER_A1A2_values)
ER_A1A3_names <- c(ER_A1A3_values)
ER_A2A3_names <- c(ER_A2A3_values)

  #making files lists
Eagonist1_top_listforvenndiagram <- c(Eagonist1_top$chemotypes)
Eagonist2_top_listforvenndiagram <- c(Eagonist2_top$chemotypes)
Eagonist3_top_listforvenndiagram <- c(Eagonist3_top$chemotypes)

  #making Venndiagram object
ER_agonist_venndiagram <- venn.diagram(list(er_bla_agonist_p2=Eagonist1_top_listforvenndiagram, er_luc_bg1_4e2_agonist_p2=Eagonist2_top_listforvenndiagram, er_luc_bg1_4e2_agonist_p4=Eagonist3_top_listforvenndiagram),
                  fill = c("orange", "blue", "pink"),
                  filename=NULL, 'cat.just' = list(c(1.5,-2),c(0.2,0.8),c(0,-3)))


grid.newpage()
grid.draw(ER_agonist_venndiagram) 
```

To further explore the 2 top chemotypes, a new model was created in order to validate the importance of the chemotypes. er_bla_agonist_p2 dataset was used since it has the most observations. First the file was cut to only have the top 2 chemotypes. Then a model was created. The model was cross validated 5 fold. The new model was compared to the original er_bla_agonist_p2 model. The new model did not have any ability to predict toxicity.

```{r}
#cut files to have only certain column
er_bla_agonist_p2_onlyimportantcolumns.2 <- er_bla_agonist_p2.2 |>
  select(X, Aromatic.Ring...1, X6M.ring...1, target)

er_bla_agonist_p2_onlyimportantcolumns.3 <- 
  er_bla_agonist_p2_onlyimportantcolumns.2 |>
  select(-X)

#make model
set.seed(1234)
er_bla_agonist_p2_onlyimportantcolumns.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = er_bla_agonist_p2_onlyimportantcolumns.3)

#cross validation 
set.seed(1234)
er_bla_agonist_p2_onlyimportantcolumns.folds <- vfold_cv(er_bla_agonist_p2_onlyimportantcolumns.3, v=5)

set.seed(1234)
er_bla_agonist_p2_onlyimportantcolumns.cv <-
  rf_workflow |>
  fit_resamples(er_bla_agonist_p2_onlyimportantcolumns.folds, 
                control = control_resamples(save_pred = TRUE)) 

collect_metrics(er_bla_agonist_p2_onlyimportantcolumns.cv)

#auc 
er_bla_agonist_p2_onlyimportantcolumns.roc <- er_bla_agonist_p2_onlyimportantcolumns.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)

#Graph to compare old to new
ggplot() + 
  geom_path(data = er_bla_agonist_p2.roc, aes (x=1 - specificity, y = sensitivity, color = "blue")) +
  geom_path(data = er_bla_agonist_p2_onlyimportantcolumns.roc, aes (x=1 - specificity, y = sensitivity, color = "red")) +
  labs(color = "Model") +
  scale_color_manual(values = (c("blue","red")), 
                     labels = ~ stringr::str_wrap(c("Full model (all chemotypes), accuracy: 0.9588106, auc: 0.5000000", "New model (only top chemotypes), accuracy: 0.9466815, auc: 0.5000000"), width = 20)) +
  geom_abline(lty=3) +
  coord_equal() +
  theme_bw() +
  ggtitle("Comparison of er_bla_agonist_p2 models")
```

### Estrogen Receptor antagonist

```{r}
#ER antagonist assays: er_bla_antagonist_p1, er_luc_bg1_4e2_antagonist_p1, er_luc_bg1_4e2_antagonist_p2

#geting meandecreasegini
Eantagonist1_important <- er_bla_antagonist_p1.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
Eantagonist1_log<- log(Eantagonist1_important$MeanDecreaseGini)
hist(Eantagonist1_log, 25, main = "er_bla_antagonist_p1 model histogram", xlab = "log (mean decrease gini)")  

Eantagonist_1std <- sd(Eantagonist1_log[is.finite(Eantagonist1_log)], na.rm=TRUE)
Eantagonist_1mean <- mean(Eantagonist1_log[is.finite(Eantagonist1_log)], na.rm=TRUE)
Eantagonist_1threshold <- exp(Eantagonist_1mean+Eantagonist_1std)

#values above 1 std 
Eantagonist1_top <-Eantagonist1_important |>
  filter(MeanDecreaseGini > Eantagonist_1threshold)

#__________________________________________________________________________________

Eantagonist2_important <- er_luc_bg1_4e2_antagonist_p1.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
Eantagonist2_log<- log(Eantagonist2_important$MeanDecreaseGini)
hist(Eantagonist2_log, 25, main = "er_luc_bg1_4e2_antagonist_p1 model histogram", xlab = "log (mean decrease gini)")  
Eantagonist_2std <- sd(Eantagonist2_log[is.finite(Eantagonist2_log)], na.rm=TRUE)
Eantagonist_2mean <- mean(Eantagonist2_log[is.finite(Eantagonist2_log)], na.rm=TRUE)
Eantagonist_2threshold <- exp(Eantagonist_2mean+Eantagonist_2std)

#values above 1 std 
Eantagonist2_top <-Eantagonist2_important |>
  filter(MeanDecreaseGini > Eantagonist_2threshold)

#__________________________________________________________________________________

Eantagonist3_important <- er_luc_bg1_4e2_antagonist_p2.rf_cls_fit |>
  extract_fit_engine() |>
  importance () |>
  as.data.frame() |>
  rownames_to_column("chemotypes") |>
  arrange(desc(MeanDecreaseGini))

#To see what the threshold of signficant should be 
Eantagonist3_log<- log(Eantagonist3_important$MeanDecreaseGini)
hist(Eantagonist3_log, 25, main = "er_luc_bg1_4e2_antagonist_p2 model histogram", xlab = "log (mean decrease gini)") 
Eantagonist_3std <- sd(Eantagonist3_log[is.finite(Eantagonist3_log)], na.rm=TRUE)
Eantagonist_3mean <- mean(Eantagonist3_log[is.finite(Eantagonist3_log)], na.rm=TRUE)
Eantagonist_3threshold <- exp(Eantagonist_3mean+Eantagonist_3std)

#values above 1 std 
Eantagonist3_top <-Eantagonist3_important |>
  filter(MeanDecreaseGini > Eantagonist_3threshold)
```

The top chemotypes of each model for the estrogen receptor antagonist were intersected to find the common chemotypes.

```{r}
#same values
  #pairwise
ER_An1An2_values <- intersect(Eantagonist1_top$chemotype, Eantagonist2_top$chemotype)
ER_An1An3_values <- intersect(Eantagonist1_top$chemotype, Eantagonist3_top$chemotype)
ER_An2An3_values <- intersect(Eantagonist2_top$chemotype, Eantagonist3_top$chemotype)

  #all three assays
ER_antagonist_common <- intersect(intersect(Eantagonist1_top$chemotype, Eantagonist2_top$chemotype), Eantagonist3_top$chemotype)
print(ER_antagonist_common)
```

A venn diagram of the top chemotypes of the estrogen receptor antagonist models was created. There are 2 chemotypes in common. Interestingly, they are the same two chemotypes that were important in the estrogen receptor agonist models.

```{r}
#venn diagram
  #making intersects lists
ER_antagonist_allthree <- c(ER_antagonist_common)
ER_An1An2_names <- c(ER_An1An2_values)
ER_An1An3_names <- c(ER_An1An3_values)
ER_An2An3_names <- c(ER_An2An3_values)

  #making files lists
Eantagonist1_top_listforvenndiagram <- c(Eantagonist1_top$chemotypes)
Eantagonist2_top_listforvenndiagram <- c(Eantagonist2_top$chemotypes)
Eantagonist3_top_listforvenndiagram <- c(Eantagonist3_top$chemotypes)

  #making Venndiagram object
ER_antagonist_venndiagram <- venn.diagram(list(er_bla_antagonist_p1=Eantagonist1_top_listforvenndiagram, er_luc_bg1_4e2_antagonist_p1=Eantagonist2_top_listforvenndiagram, er_luc_bg1_4e2_antagonist_p2=Eantagonist3_top_listforvenndiagram),
                  fill = c("orange", "blue", "pink"),
                  filename=NULL, 'cat.just' = list(c(0.5,0.1),c(0.05,-3),c(0.9,-3)))


grid.newpage()
grid.draw(ER_antagonist_venndiagram) 
```

To further explore the 2 top chemotypes, a new model was created in order to validate the importance of the chemotypes. er_luc_bg1_4e2_antagonist_p1 dataset was used since it has the most observations. First the file was cut to only have the top 2 chemotypes. Then a model was created. The model was cross validated 5 fold. The new model was compared to the original er_luc_bg1_4e2_antagonist_p1 model. The new model did not have any ability to predict toxicity, much like the estrogen receptor agonist top chemotypes model.

```{r}
#cut files to have only certain column
er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.2 <-
  er_luc_bg1_4e2_antagonist_p1.2 |>
  select(X, Aromatic.Ring...1, X6M.ring...1, target)

er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.3 <- 
  er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.2 |>
  select(-X)

#make model
set.seed(1234)
er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.rf_cls_fit <- rf_cls_spec |>
  fit(target ~ ., data = er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.3)

#cross validation 
set.seed(1234)
er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.folds <- vfold_cv(er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.3, v=5)

set.seed(1234)
er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.cv <-
  rf_workflow |>
  fit_resamples(er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.folds, 
                control = control_resamples(save_pred = TRUE)) 

collect_metrics(er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.cv)

#auc 
er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.roc <- er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.cv |>
  collect_predictions() |>
  roc_curve(target, .pred_0)

#Graph to compare old to new
ggplot() + 
  geom_path(data = er_luc_bg1_4e2_antagonist_p1.roc, aes (x=1 - specificity, y = sensitivity, color = "blue")) +
  geom_path(data = er_luc_bg1_4e2_antagonist_p1_onlyimportantcolumns.roc, aes (x=1 - specificity, y = sensitivity, color = "red")) +
  labs(color = "Model") +
  scale_color_manual(values = (c("blue","red")), 
                     labels = ~ stringr::str_wrap(c("Full model (all chemotypes), accuracy: 0.9517049, auc: 0.5000000", "New model (only top chemotypes), accuracy: 0.9457971, auc: 0.5000000"), width = 20)) +
  geom_abline(lty=3) +
  coord_equal() +
  theme_bw() +
  ggtitle("Comparison of er_luc_bg1_4e2_antagonist_p1 models")
```

## Conclusion

Out of all groups analyzed, only the androgen receptor agonist models had chemotypes that were able to predict the toxicity of PFAS. Therefore, predictive chemotypes (C..C..A..A, CC.C..C.A, A.A..A..A, X5.M.ring, C.C.C.C, C.C, C.C.A.A, X6M.ring...1) for Androgen receptor agonist should be further explored as potential factors for PFAS toxicity.

MACCS Fingerprint decipher (used Smarts.plus to visualize)

C..C..A..A : (26) ![](https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/chemotype_26.png)

CC.C..C.A : (66) ![](https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/chemotype_66.png) A.A..A..A : (105) ![](https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/chemotype_105.png)

X5.M.ring : (96)

![](https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/chemotype_96.png)

C.C.C.C : (50) ![](https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/chemotype_50.png)

C.C : (99) ![](https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/chemotype_99.png)

C.C.A.A : (76)

\*Note: different than chemotype (26) due to the specification of the atoms environment ![](https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/chemotype_76.png)

X6M.ring...1 : (145)

![](https://raw.githubusercontent.com/AndreaHuacachino/BMIN503_Final_Project/master/chemotype_145.png)

A potential limitation of the study might be the validation of the top chemotypes through making models only with the top chemotypes. Estrogen receptor agonist and antagonist only had 2 chemotypes that were significant and in common. This great reduction of features must have greatly impacted the predictive abilities of the model.

## Acknowledgments

I would like to acknowledge both my mentors for their guidance setting up the project. I would like to particularly thank Dr. Joe Romano for his help with retrieving the datasets. I would also like to acknowledge graduate student Alan Boka (Ostap lab, Department of Physiology) for his help with code assistance regarding the css chunk as well as his encouragement throughout. Talking through my project and logic with Alan was advantageous to my development with computational analysis.

## References

1.  Romano JD, Hao Y, & Moore JH. (2022) Improving QSAR Modeling for Predictive Toxicology using Publicly Aggregated Semantic Graph Data and Graph Neural Networks. Pacific Symposium on Biocomputing 27: 187-198.

2.  Vagi, S.J., Azziz-Baumgartner, E., Sjödin, A. *et al.* Exploring the potential association between brominated diphenyl ethers, polychlorinated biphenyls, organochlorine pesticides, perfluorinated compounds, phthalates, and bisphenol a in polycystic ovary syndrome: a case--control study. *BMC Endocr Disord* **14**, 86 (2014). https://doi.org/10.1186/1472-6823-14-86

3.  J. Lyngsø, C.H. Ramlau-Hansen, B.B. Høyer, H. Støvring, J.P. Bonde, B.A.G. Jönsson, C.H. Lindh, H.S. Pedersen, J.K. Ludwicki, V. Zviezdai, G. Toft, Menstrual cycle characteristics in fertile women from Greenland, Poland and Ukraine exposed to perfluorinated chemicals: a cross-sectional study, *Human Reproduction*, Volume 29, Issue 2, February 2014, Pages 359--367, https://doi.org/10.1093/humrep/det390

4.  Sakr CJ, Leonard RC, Kreckmann KH, Slade MD, Cullen MR. Longitudinal study of serum lipids and liver enzymes in workers with occupational exposure to ammonium perfluorooctanoate. J Occup Environ Med. 2007 Aug;49(8):872-9. doi: 10.1097/JOM.0b013e318124a93f. Erratum in: J Occup Environ Med. 2007 Nov;49(11):1294. PMID: 17693785.

5.  Fei C, McLaughlin JK, Lipworth L, Olsen J. Maternal levels of perfluorinated chemicals and subfecundity. Hum Reprod. 2009 May;24(5):1200-5. doi: 10.1093/humrep/den490. Epub 2009 Jan 28. PMID: 19176540.

6.  https://www.niehs.nih.gov/health/topics/agents/pfc/index.cfm, last updated October 05, 2023.

7.  https://www.ewg.org/interactive-maps/pfas_contamination, last updated August 18, 2023

8.  Vladimir Svetnik, Andy Liaw, Christopher Tong, J. Christopher Culberson, Robert P. Sheridan, and Bradley P. Feuston, Journal of Chemical Information and Computer Sciences **2003** *43* (6), 1947-1958, DOI: 10.1021/ci034160g

9.  Huang R. A Quantitative High-Throughput Screening Data Analysis Pipeline for Activity Profiling. In: Zhu H, Xia M, editors. High-Throughput Screening Assays in Toxicology. Methods in Molecular Biology. 1473. 1 ed: Humana Press; 2016

10. Huang R, Xia M, Sakamuru S, Zhao J, Shahane SA, Attene-Ramos M, Zhao T, Austin CP, Simeonov A. (2016) Modelling the Tox21 10 K chemical profiles for in vivo toxicity prediction and mechanism characterization. Nat Commun. 7:10425

11. Huang R, Xia M, Sakamuru S, Zhao J, Lynch C, Zhao T, Zhu H, Austin CP, Simeonov A. (2018) Expanding biological space coverage enhances the prediction of drug adverse effects in human using in vitro activity profiles. Sci Rep. 8(1):3783

12. Berg KA, Clarke WP. Making Sense of Pharmacology: Inverse Agonism and Functional Selectivity. Int J Neuropsychopharmacol. 2018 Oct 1;21(10):962-977. doi: 10.1093/ijnp/pyy071. PMID: 30085126; PMCID: PMC6165953.

13. https://list.indiana.edu/sympa/arc/chminf-l/2007-11/msg00058.html

14. https://www.daylight.com/dayhtml/doc/theory/theory.smarts.html

15. https://smarts.plus
